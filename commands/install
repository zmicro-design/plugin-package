#!/bin/bash

help() {
  echo "Usage:"
  echo "  zmicro package install [options...] <package>[@<version>] [<package>[@<version>] ...]"
  echo ""
  echo "Options:"
  echo "  -v,--version <version>    - specify package version"
  echo "  --build-from-source       - package build from source, set env PLUGIN_PACKAGE_BUILD_FROM_SOURCE=true"
  echo "  --offline                 - use offline package, do not update"
  echo "  --use-doreamon-design     - use doreamon design version"
  echo "  --bootstrap-service       - bootstrap service if exist"
  echo "  --no-check-latest         - do not check latest, set env PLUGIN_PACKAGE_NO_CHECK_LATEST=true"
}

core() {
  if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    help
    exit 0
  fi

  local names=""

  while [[ $# -gt 0 ]]; do
    local key=$1
    local value=$2
    case $key in
    -v | --version)
      var::set version $value
      shift
      shift
      ;;
    --build-from-source)
      export PLUGIN_PACKAGE_BUILD_FROM_SOURCE=true
      # @depreciated compitable
      export BUILD_FROM_SOURCE=true
      shift
      ;;
    --no-check-latest)
      export PLUGIN_PACKAGE_NO_CHECK_LATEST=true
      ;;
    --offline)
      export PLUGIN_PACKAGE_OFFLINE=true
      shift
      ;;
    --use-doreamon-design)
      export PLUGIN_PACKAGE_USE_DOREAMON_DESIGN=true
      shift
      ;;
    --bootstrap-service)
      export PLUGIN_PACKAGE_BOOTSTRAP_SERVICE=true
      shift
      ;;
    --test)
      export PLUGIN_PACKAGE_INSTALL_MODE=test
      shift
      ;;
    --pm | --package-manager)
      export PLUGIN_PACKAGE_INSTALL_PACKAGE_MANAGER=$value
      shift
      shift
      ;;
    *)
      # unknown options
      if [ "${key:0:1}" = "-" ]; then
        log::error "unknown options $key"
        return 1
      fi

      names="$names $key"
      shift
      ;;
    esac
  done

  if [ -z "$names" ]; then
    log::error "package name is requried"
    exit 1
  fi

  local total=$(echo $names | wc -w | xargs)
  local current=0
  
  if [ "$total" = "1" ]; then
    package::install $name $version
    return $?
  fi

  for name in $names; do
    current=$((current + 1))
    
    local version=""
    if [ "$(version::at $name)" = "true" ]; then
      version=$(version::at_version $name)
      name=$(version::at_name $name)
    fi

    if [ -n "$version" ]; then
      log::info "[$current/$total][$(timestamp)] install $name with version $version ..."
    else
      log::info "[$current/$total](timestamp)] install $name ..."
    fi
    
    package::install $name $version
  done
}

run() {
  core $@
}

run $@
